name: E2E Tests

on:
  workflow_dispatch:
  pull_request:
    types: [ opened, reopened, synchronize, labeled ]
    branches:
    - main

permissions:
  id-token: write
  contents: read

jobs:
  test-content:
    if: ${{ (github.event.action == 'labeled' && github.event.label.name == 'automation/e2e-tests') || (github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, 'automation/e2e-tests')) }}

    name: run-tests
    runs-on: ubuntu-latest
    concurrency: test-environment
    timeout-minutes: 90
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.9
        terraform_wrapper: false
    - name: Install utilities
      run: |
        sudo apt install -y gettext

        mkdir -p ${HOME}/.local/bin
        wget https://github.com/jckuester/awsweeper/releases/download/v0.12.0/awsweeper_0.12.0_linux_amd64.tar.gz
        tar zxf awsweeper_0.12.0_linux_amd64.tar.gz
        mv awsweeper_0.12.0_linux_amd64/awsweeper ${HOME}/.local/bin

        echo "${HOME}/.local/bin" >> $GITHUB_PATH
    - name: Get AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-duration-seconds: 3600
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GithubActionsSession
    - name: Set cluster ID
      env:
        RUN_ID: "${{ github.run_id }}"
      run: |
        CLUSTER_ID="ci-${RUN_ID}"
        echo "CLUSTER_ID=$CLUSTER_ID" >> $GITHUB_ENV
        echo "TF_VAR_cluster_id=${CLUSTER_ID}" >> $GITHUB_ENV
    - name: Create infrastructure
      id: create-infrastructure
      working-directory: test/terraform
      run: |
        terraform init -backend-config="bucket=${{ secrets.TFSTATE_BUCKET }}" -backend-config="key=ci/${CLUSTER_ID}/terraform.tfstate"
        terraform apply --auto-approve
    - name: Refresh AWS credentials
      if: always()
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-duration-seconds: 3600
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GithubActionsSession
    - name: Run tests - Introduction
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test terraform_context="test/terraform" module="introduction"
    - name: Run tests - Fundamentals
      if: ${{ github.event_name == 'workflow_dispatch' || contains( github.event.pull_request.labels.*.name, 'content/fundamentals') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test terraform_context="test/terraform" module="fundamentals"
    - name: Run tests - Security
      if: ${{ github.event_name == 'workflow_dispatch' || contains( github.event.pull_request.labels.*.name, 'content/security') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test terraform_context="test/terraform" module="security"
    - name: Run tests - Networking
      if: ${{ github.event_name == 'workflow_dispatch' || contains( github.event.pull_request.labels.*.name, 'content/networking') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test terraform_context="test/terraform" module="networking"
    - name: Run tests - Autoscaling
      if: ${{ github.event_name == 'workflow_dispatch' || contains( github.event.pull_request.labels.*.name, 'content/autoscaling') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test terraform_context="test/terraform" module="autoscaling"
    - name: Run tests - Observability
      if: ${{ github.event_name == 'workflow_dispatch' || contains( github.event.pull_request.labels.*.name, 'content/observability') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test terraform_context="test/terraform" module="observability"
    - name: Run tests - Cost optimization
      if: ${{ github.event_name == 'workflow_dispatch' || contains( github.event.pull_request.labels.*.name, 'content/cost-optimization') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test terraform_context="test/terraform" module="costoptimization"
    - name: Run tests - Cleanup
      if: always()
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test terraform_context="test/terraform" module="cleanup"
    - name: Refresh AWS credentials
      if: always()
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-duration-seconds: 3600
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GithubActionsSession
    - name: Cleanup environment
      if: always()
      working-directory: test/terraform
      run: |
        terraform destroy -target=module.core.module.cluster.module.eks-blueprints-kubernetes-addons --auto-approve
        terraform destroy -target=module.core.module.cluster.module.eks-blueprints-kubernetes-csi-addon --auto-approve
        terraform destroy -target=module.core.module.cluster.module.descheduler --auto-approve

        terraform destroy -target=module.core.module.cluster.module.eks-blueprints --auto-approve

        envsubst < ../../hack/lib/filter.yml > filter.yml
        awsweeper --force filter.yml

        terraform destroy --auto-approve
