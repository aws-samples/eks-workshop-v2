# Step : Prepare the environment (GOOD)
prepare-environment fundamentals/storage/s3

# Step : Shows container image
kubectl describe deployment -n assets

# Step : Show container build images (cat.jpg, dog.jpg, hamster.jpg, bird.jpg)
kubectl exec --stdin deployment/assets \
  -n assets -- bash -c "ls /usr/share/nginx/html/assets/"


# Step: Scale up deployment for multiple replicas
kubectl scale -n assets --replicas=2 deployment/assets
kubectl rollout status -n assets deployment/assets --timeout=60s

# Step : Put image in first pod
POD_NAME=$(kubectl -n assets get pods -o jsonpath='{.items[0].metadata.name}')
kubectl exec --stdin $POD_NAME \
  -n assets -- bash -c 'touch /usr/share/nginx/html/assets/horse.jpg'

# Step : Confirm image not in second pod
POD_NAME=$(kubectl -n assets get pods -o jsonpath='{.items[1].metadata.name}')
kubectl exec --stdin $POD_NAME \
  -n assets -- bash -c 'ls /usr/share/nginx/html/assets'




# Step : Attach addon to EKS cluster (GOOD)
eksctl create addon --name aws-mountpoint-s3-csi-driver --cluster $EKS_CLUSTER_NAME --service-account-role-arn $S3_CSI_ADDON_ROLE --force

# Step : Show mountpoint exists
kubectl get daemonset s3-csi-node -n kube-system




---- Test until here first and then proceed -----

# Step : Run this to create storage class
kubectl apply -k ~/environment/eks-workshop/modules/fundamentals/storage/s3/storageclass

# Step : Run this to create PV and PVC 
envsubst < ~/environment/eks-workshop/modules/fundamentals/storage/s3/deployment/s3pvclaim.yaml | kubectl apply -f -

kubectl apply -k ~/environment/eks-workshop/modules/fundamentals/storage/s3/deployment

# Step : Nginx deployment (test)


# Step : Interact with deployment ??
How??

# Step : Navigate to S3 bucket and see file




### EXTRA INFORMATION ###

# Run this to view persistent volumes/storage class
kubectl get pv
kubectl get pvc
kubectl get storageclass


